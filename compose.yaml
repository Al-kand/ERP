services:

    # Php -------------------------------------------------
    php:
        build:
            context: ./docker/php
            dockerfile: Dockerfile
            args:
                - UID=${UID:-1000}
        container_name: gcg-php
        restart: unless-stopped
        volumes:
            - ./:/srv/gcg.test
        working_dir: /srv/gcg.test
        networks:
            - gcg
        logging:
            options:
                max-size: "10m"
                max-file: "3"

    # Nginx -----------------------------------------------
    nginx:
        image: nginx:alpine        
        container_name: gcg-nginx
        restart: unless-stopped
        ports:
            - ${APP_PORT:-80}:80        
        volumes:
            - ./:/srv/gcg.test
            - ./docker/nginx/conf.d:/etc/nginx/conf.d
        depends_on:
            - php
            - pgsql
        networks:
            - gcg
        logging:
            options:
                max-size: "10m"
                max-file: "3"

    # Posgresql -------------------------------------------          
    pgsql:
        image: 'postgres:14'
        container_name: gcg-pgsql
        restart: always
        ports:
            - ${DB_PORT:-5432}:5432
        environment:
            PGPASSWORD: ${DB_PASSWORD}
            POSTGRES_DB: ${DB_DATABASE}
            POSTGRES_USER: ${DB_USERNAME}
            POSTGRES_PASSWORD: ${DB_PASSWORD}
        volumes:
            - pgsql-data:/var/lib/postgresql/data
        networks:
            - gcg

    # Npm -------------------------------------------------        
    npm:
        image: node:alpine
        container_name: gcg-npm
        volumes:
            - ./:/home/node/app
        working_dir: /home/node/app
        entrypoint: [ "npm" ]
        command: [ "install" ]

    # Composer --------------------------------------------
    composer:
        image: composer:latest
        container_name: gcg-composer
        volumes:
            - ./:/app
        depends_on:
            - php
        entrypoint: [ "composer" ]
        command: [ "install" ]

networks:
    gcg:
        driver: bridge

volumes:   
    pgsql-data:
        driver: local
